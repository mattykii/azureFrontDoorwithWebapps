
# trigger:
#   branches:
#     include:
#     - main
#   paths:
#     exclude:
#       - kata
#       - backup
#       - README.md

stages:
- stage: Build
  jobs:
  - job: Buildterraform

    variables:
    - name: BuildParameters.provider
      value: azurerm
    - name: BuildParameters.workingDirectory
      value: terraformKata1
    - group: variable-group1

    displayName: Agent job 1
    pool:
      vmImage: ubuntu-18.04
    steps:
    - checkout: self
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: terraformKata1
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - task: TerraformInstaller@0
      displayName: Install Terraform 0.13.5
      inputs:
        terraformVersion: 0.13.5

    - task: TerraformTaskV2@2
      displayName: Terraform init
      inputs:
        command: init
        provider: $(BuildParameters.provider)
        workingDirectory: $(BuildParameters.workingDirectory)
        backendServiceArm: 'portal service connection'
        backendAzureRmResourceGroupName: $(storage_resource_group)
        backendAzureRmStorageAccountName: $(storage)
        backendAzureRmContainerName: $(container)
        backendAzureRmKey: $(key)

    - task: TerraformTaskV2@2
      displayName: Terraform validate
      inputs:
        command: validate
        workingDirectory: terraformKata1

    - task: TerraformTaskV2@2
      displayName: Terraform plan
      inputs:
        command: plan
        workingDirectory: terraformKata1
        environmentServiceNameAzureRM: 'portal service connection'
      env:
        ARM_CLIENT_ID: $(client_id)
        ARM_CLIENT_SECRET: $(client_secret)
        ARM_SUBSCRIPTION_ID: $(subscription_id)
        ARM_TENANT_ID: $(tenant_id)  

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'

- stage: Deployment
  displayName: 'Deployment dev'
  variables:
    - name: BuildParameters.provider
      value: azurerm
    - group: variable-group1
    
  jobs: 
  - deployment:
    pool:
      vmImage: ubuntu-18.04
    environment: 'dev'
    strategy: 
     runOnce:
       deploy:
        steps:
          - task: TerraformInstaller@0
            displayName: Install Terraform 0.13.5
            inputs:
              terraformVersion: '0.13.5'

          - task: TerraformTaskV2@2
            displayName: Terraform init
            inputs:
              provider: $(BuildParameters.provider)
              command: 'init'
              workingDirectory: /home/vsts/work/1/drop/
              backendServiceArm: 'portal service connection'
              backendAzureRmResourceGroupName: $(storage_resource_group)
              backendAzureRmStorageAccountName: $(storage)
              backendAzureRmContainerName: $(container)
              backendAzureRmKey: $(key)


          - task: TerraformTaskV2@2
            displayName: Terraform plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'portal service connection'
              workingDirectory: /home/vsts/work/1/drop/
            env:
              ARM_CLIENT_ID: $(client_id)
              ARM_CLIENT_SECRET: $(client_secret)
              ARM_SUBSCRIPTION_ID: $(subscription_id)
              ARM_TENANT_ID: $(tenant_id)    

          - task: TerraformTaskV2@2
            displayName: Terraform apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'portal service connection'
              workingDirectory: /home/vsts/work/1/drop/
            env:
              ARM_CLIENT_ID: $(client_id)
              ARM_CLIENT_SECRET: $(client_secret)
              ARM_SUBSCRIPTION_ID: $(subscription_id)
              ARM_TENANT_ID: $(tenant_id)  

